// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	datatransfers "github.com/usernamesalah/quiz-master/internal/datatransfers"

	models "github.com/usernamesalah/quiz-master/pkg/models"
)

// QuestionUsecase is an autogenerated mock type for the QuestionUsecase type
type QuestionUsecase struct {
	mock.Mock
}

// AnswerQuestion provides a mock function with given fields: answer
func (_m *QuestionUsecase) AnswerQuestion(answer *datatransfers.Answer) (string, error) {
	ret := _m.Called(answer)

	var r0 string
	if rf, ok := ret.Get(0).(func(*datatransfers.Answer) string); ok {
		r0 = rf(answer)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*datatransfers.Answer) error); ok {
		r1 = rf(answer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: question
func (_m *QuestionUsecase) Create(question *models.Question) error {
	ret := _m.Called(question)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Question) error); ok {
		r0 = rf(question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: question
func (_m *QuestionUsecase) Delete(question *models.Question) error {
	ret := _m.Called(question)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Question) error); ok {
		r0 = rf(question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: param
func (_m *QuestionUsecase) GetAll(param *datatransfers.ListQueryParams) ([]*models.Question, int64, error) {
	ret := _m.Called(param)

	var r0 []*models.Question
	if rf, ok := ret.Get(0).(func(*datatransfers.ListQueryParams) []*models.Question); ok {
		r0 = rf(param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Question)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*datatransfers.ListQueryParams) int64); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*datatransfers.ListQueryParams) error); ok {
		r2 = rf(param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByID provides a mock function with given fields: questionID
func (_m *QuestionUsecase) GetByID(questionID int) (*models.Question, error) {
	ret := _m.Called(questionID)

	var r0 *models.Question
	if rf, ok := ret.Get(0).(func(int) *models.Question); ok {
		r0 = rf(questionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(questionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: question
func (_m *QuestionUsecase) Update(question *models.Question) error {
	ret := _m.Called(question)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Question) error); ok {
		r0 = rf(question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
